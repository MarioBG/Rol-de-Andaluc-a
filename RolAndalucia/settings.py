"""
Django settings for RolAndalucia project.

Generated by 'django-admin startproject' using Django 2.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os, environ
import dj_database_url

# Set up the environment reading elements

env = environ.Env()
environ.Env.read_env()

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env("SECRET_KEY")
if 'DYNO' in os.environ:
    BASEURL = 'https://rol-andalucia.herokuapp.com/'
# SECURITY WARNING: don't run with debug turned on in production!
if 'DYNO' in os.environ:
    DEBUG = False
else:
    DEBUG = True

if 'DYNO' in os.environ:
    SECURE_SSL_REDIRECT = True
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

    ALLOWED_HOSTS = ['localhost', '192.168.0.11', 'https://rol-andalucia.herokuapp.com', '*']
else:
    ALLOWED_HOSTS = ['https://rol-andalucia.herokuapp.com']
VERSION = 2

DEFAULT_AUTO_FIELD = 'django.db.models.AutoField'

# Application definition

INSTALLED_APPS = [
    'admin_shortcuts',
    'django_telegrambot',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    "colorfield",
    "ordered_model",
    'rest_framework',
    'RolAndalucia.apps.RolAndaluciaConfig',
    'martor',
    'treewidget',
    'leaflet',
    'django_imgur',
]

# if 'DYNO' in os.environ:
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}
# else:
#     DATABASES = {
#         'default': {
#             'ENGINE': 'django.db.backends.postgresql_psycopg2',
#             'NAME': env("POSTGRES_NAME"),
#             'USER': env("POSTGRES_USER"),
#             'PASSWORD': env("POSTGRES_PASS"),
#             'HOST': env("POSTGRES_HOST"),
#             'PORT': env("POSTGRES_PORT"),
#         }
#     }

IMGUR_CONSUMER_ID = env("IMGUR_CONSUMER_ID")
IMGUR_CONSUMER_SECRET = env("IMGUR_CONSUMER_SECRET")
IMGUR_USERNAME = env("IMGUR_USERNAME")
IMGUR_ACCESS_TOKEN = env("IMGUR_ACCESS_TOKEN")
IMGUR_ACCESS_TOKEN_REFRESH = env("IMGUR_ACCESS_TOKEN_REFRESH")
if 'DYNO' in os.environ:
    DATABASES['default']['ENGINE'] = 'django.contrib.gis.db.backends.postgis'
    db_from_env = dj_database_url.config(conn_max_age=500)
    DATABASES['default'].update(db_from_env)
else:
    GDAL_LIBRARY_PATH = "C:\\OSGeo4W\\bin\\gdal306.dll"

USE_TZ = True
TIME_ZONE = 'Europe/Madrid'

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

#Django Telegram Bot settings

DJANGO_TELEGRAMBOT = {

    'MODE' : 'WEBHOOK', #(Optional [str]) # The default value is WEBHOOK,
                        # otherwise you may use 'POLLING'
                        # NB: if use polling you must provide to run
                        # a management command that starts a worker

    'WEBHOOK_SITE' : env("TELEGRAM_LOCAL_IP") if 'DYNO' not in os.environ else env("TELEGRAM_HEROKU_IP"),
    'WEBHOOK_PREFIX' : '/botupdate', # (Optional[str]) # If this value is specified,
                                  # a prefix is added to webhook url

    #'WEBHOOK_CERTIFICATE' : 'cert.pem', # If your site use self-signed
                         #certificate, must be set with location of your public key
                         #certificate.(More info at https://core.telegram.org/bots/self-signed )

    'BOTS' : [
        {
           'TOKEN': env("TELEGRAM_LOCAL_TOKEN") if 'DYNO' in os.environ else env("TELEGRAM_HEROKU_TOKEN"), #Your bot token.

           'ALLOWED_UPDATES':(['my_chat_member', 'message']), # List the types of
                                                   #updates you want your bot to receive. For example, specify
                                                   #``["message", "edited_channel_post", "callback_query"]`` to
                                                   #only receive updates of these types. See ``telegram.Update``
                                                   #for a complete list of available update types.
                                                   #Specify an empty list to receive all updates regardless of type
                                                   #(default). If not specified, the previous setting will be used.
                                                   #Please note that this parameter doesn't affect updates created
                                                   #before the call to the setWebhook, so unwanted updates may be
                                                   #received for a short period of time.

           #'TIMEOUT':(Optional[int|float]), # If this value is specified,
                                   #use it as the read timeout from the server

           #'WEBHOOK_MAX_CONNECTIONS':(Optional[int]), # Maximum allowed number of
                                   #simultaneous HTTPS connections to the webhook for update
                                   #delivery, 1-100. Defaults to 40. Use lower values to limit the
                                   #load on your bot's server, and higher values to increase your
                                   #bot's throughput.

           #'POLL_INTERVAL' : (Optional[float]), # Time to wait between polling updates from Telegram in
                           #seconds. Default is 0.0

           #'POLL_CLEAN':(Optional[bool]), # Whether to clean any pending updates on Telegram servers before
                                   #actually starting to poll. Default is False.

           #'POLL_BOOTSTRAP_RETRIES':(Optional[int]), # Whether the bootstrapping phase of the `Updater`
                                   #will retry on failures on the Telegram server.
                                   #|   < 0 - retry indefinitely
                                   #|     0 - no retries (default)
                                   #|   > 0 - retry up to X times

           #'POLL_READ_LATENCY':(Optional[float|int]), # Grace time in seconds for receiving the reply from
                                   #server. Will be added to the `timeout` value and used as the read timeout from
                           #server (Default: 2).
        },
        #Other bots here with same structure.
    ],

}

ADMIN_SHORTCUTS = [
    {
        'shortcuts': [
            {
                'url': '/',
                'open_new_window': True,
            },
            {
                'url_name': 'admin:logout',
            },{
                'url': '/admin/django-telegrambot',
                'icon': 'comments'
            }
            # {
            #     'title': 'Users',
            #     'url_name': 'admin:auth_user_changelist',
            #     'count': 'example.utils.count_users',
            # },
            # {
            #     'title': 'Groups',
            #     'url_name': 'admin:auth_group_changelist',
            #     'count': 'example.utils.count_groups',
            # },
            # {
            #     'title': 'Add user',
            #     'url_name': 'admin:auth_user_add',
            #     'has_perms': 'example.utils.has_perms_to_users',
            # },
        ]
    },
    # {
    #     'title': 'CMS',
    #     'shortcuts': [
    #         {
    #             'title': 'Pages',
    #             'url_name': 'admin:index',
    #         },
    #         {
    #             'title': 'Files',
    #             'url_name': 'admin:index',
    #         },
    #         {
    #             'title': 'Contact forms',
    #             'icon': 'columns',
    #             'url_name': 'admin:index',
    #             'count_new': '3',
    #         },
    #         {
    #             'title': 'Products',
    #             'url_name': 'admin:index',
    #         },
    #         {
    #             'title': 'Orders',
    #             'url_name': 'admin:index',
    #             'count_new': '12',
    #         },
    #     ]
    # },
]
ADMIN_SHORTCUTS_SETTINGS = {
    'show_on_all_pages': True,
    'open_new_window': False,
}

ROOT_URLCONF = 'RolAndalucia.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')]
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'RolAndalucia.contextProcessors.randoms.randoms'
            ],
        },
    },
]

WSGI_APPLICATION = 'RolAndalucia.wsgi.application'

STATIC_URL = 'RolAndalucia/static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'RolAndalucia/static')
]
PROJECT_ROOT = os.path.dirname(os.path.abspath(__file__))
STATIC_ROOT = os.path.join(PROJECT_ROOT, 'static')

LOGIN_URL = "/login"

# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASE_ROUTERS = ['RolAndalucia.routers.PrimaryRouter']

MEDIA_ROOT = os.path.join(BASE_DIR, 'uploads')
MEDIA_URL = '/media/'

# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

import django_heroku

django_heroku.settings(locals())

# Global martor settings
# Input: string boolean, `true/false`
MARTOR_ENABLE_CONFIGS = {
    'imgur': 'true',  # to enable/disable imgur/custom uploader.
    'mention': 'false',  # to enable/disable mention
    'jquery': 'true',  # to include/revoke jquery (require for admin default django)
    'living': 'false',  # to enable/disable live updates in preview
}

# To setup the martor editor with label or not (default is False)
MARTOR_ENABLE_LABEL = False

# Imgur API Keys
MARTOR_IMGUR_CLIENT_ID = env("IMGUR_ID")
MARTOR_IMGUR_API_KEY = env("IMGUR_APIKEY")

# Safe Mode
MARTOR_MARKDOWN_SAFE_MODE = True  # default

# Markdownify
MARTOR_MARKDOWNIFY_FUNCTION = 'martor.utils.markdownify'  # default
MARTOR_MARKDOWNIFY_URL = '/martor/markdownify/'  # default

# Markdown extensions (default)
MARTOR_MARKDOWN_EXTENSIONS = [
    'markdown.extensions.extra',
    'markdown.extensions.nl2br',
    'markdown.extensions.smarty',
    'markdown.extensions.fenced_code',

    # Custom markdown extensions.
    'martor.extensions.urlize',
    'martor.extensions.del_ins',  # ~~strikethrough~~ and ++underscores++
    'martor.extensions.mention',  # to parse markdown mention
    'martor.extensions.emoji',  # to parse markdown emoji
    'martor.extensions.mdx_video',  # to parse embed/iframe video
]

# Markdown Extensions Configs
MARTOR_MARKDOWN_EXTENSION_CONFIGS = {}

# Markdown urls
MARTOR_UPLOAD_URL = '/martor/uploader/'  # default
MARTOR_SEARCH_USERS_URL = '/martor/search-user/'  # default

# Markdown Extensions
# MARTOR_MARKDOWN_BASE_EMOJI_URL = 'https://www.webfx.com/tools/emoji-cheat-sheet/graphics/emojis/'     # from webfx
MARTOR_MARKDOWN_BASE_EMOJI_URL = 'https://github.githubassets.com/images/icons/emoji/'  # default from github
# MARTOR_MARKDOWN_BASE_MENTION_URL = 'https://python.web.id/author/'                                      # please change this to your domain
