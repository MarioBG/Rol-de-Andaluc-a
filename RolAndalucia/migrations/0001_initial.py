# Generated by Django 2.2.4 on 2019-08-28 15:05

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import martor.models
import treewidget.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='CharacterClass',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(verbose_name='Nombre de clase')),
                ('description', martor.models.MartorField(default='', verbose_name='Descripción')),
            ],
        ),
        migrations.CreateModel(
            name='Craftable',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Nombre de creación')),
                ('description', models.TextField(verbose_name='Descripción')),
                ('programmingCost', models.PositiveIntegerField(verbose_name='Coste de programación')),
                ('engineeringCost', models.PositiveIntegerField(verbose_name='Coste de ingeniería')),
                ('materialCost', models.TextField(blank=True, verbose_name='Costes en materiales')),
                ('effect', models.TextField(verbose_name='Efectos')),
                ('requirements', models.TextField(blank=True, verbose_name='Requisitos')),
                ('photo', models.CharField(blank=True, max_length=400, verbose_name='Imagen')),
            ],
        ),
        migrations.CreateModel(
            name='Item',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=60, verbose_name='Nombre de objeto')),
                ('description', models.TextField(verbose_name='Descripción')),
                ('type', models.CharField(max_length=30, verbose_name='Tipo de objeto')),
                ('rarity', models.CharField(blank=True, max_length=20, verbose_name='Rareza')),
                ('notes', models.CharField(blank=True, max_length=100, verbose_name='Notas')),
                ('magic', models.BooleanField(default=False, verbose_name='Magia')),
                ('wearable', models.BooleanField(default=False, verbose_name='Equipable')),
                ('effects', models.TextField(blank=True, verbose_name='Efectos')),
                ('characteristics', models.TextField(blank=True, help_text='Genera tablas en https://www.tablesgenerator.com/markdown_tables#', verbose_name='Características')),
                ('photo', models.CharField(blank=True, max_length=400, verbose_name='Imagen')),
            ],
        ),
        migrations.CreateModel(
            name='UserProfileInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('profile_pic', models.ImageField(blank=True, upload_to='profile_pics')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Spell',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Spell name')),
                ('school', models.CharField(max_length=30, verbose_name='School of Magic')),
                ('level', models.PositiveIntegerField(verbose_name='Spell level')),
                ('verbalComponent', models.BooleanField(default=False, verbose_name='Verbal Component')),
                ('somaticComponent', models.BooleanField(default=False, verbose_name='Somatic Component')),
                ('materialComponent', models.BooleanField(default=False, verbose_name='Material Component')),
                ('materialRequirements', models.CharField(blank=True, max_length=200, verbose_name='Material requirements')),
                ('castTime', models.CharField(default='N/A', max_length=100, verbose_name='Casting time')),
                ('duration', models.CharField(default='N/A', max_length=100, verbose_name='Duration')),
                ('concentration', models.BooleanField(default=False, verbose_name='Concentration')),
                ('range', models.CharField(default='N/A', max_length=100, verbose_name='Range/Area')),
                ('effect', models.CharField(default='N/A', max_length=100, verbose_name='Damage/effect type')),
                ('attack_save', models.CharField(default='N/A', max_length=100, verbose_name='Attack or save')),
                ('description', models.TextField(default='', verbose_name='Description')),
                ('classes', models.ManyToManyField(to='RolAndalucia.CharacterClass', verbose_name='Classes that use this spell')),
            ],
        ),
        migrations.CreateModel(
            name='Rule',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Nombre')),
                ('content', martor.models.MartorField(default='', verbose_name='Content')),
                ('order', models.PositiveIntegerField(default=0, verbose_name='Orden')),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
                ('parent', treewidget.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='RolAndalucia.Rule')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
